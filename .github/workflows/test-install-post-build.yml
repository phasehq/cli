name: Test CLI Installation on Linux

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string

jobs:
  test_install_x86_64:
    name: Test install on Linux distros (x86_64)
    continue-on-error: true
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - { image: ubuntu:20.04, family: deb, name: ubuntu-20.04 }
          - { image: ubuntu:22.04, family: deb, name: ubuntu-22.04 }
          - { image: ubuntu:24.04, family: deb, name: ubuntu-24.04 }
          - { image: debian:bullseye, family: deb, name: debian-bullseye }
          - { image: debian:bookworm, family: deb, name: debian-bookworm }
          - { image: debian:trixie, family: deb, name: debian-trixie }
          - { image: fedora:39, family: rpm, name: fedora-39 }
          - { image: fedora:40, family: rpm, name: fedora-40 }
          - { image: fedora:41, family: rpm, name: fedora-41 }
          - { image: fedora:42, family: rpm, name: fedora-42 }
          - { image: rockylinux:8, family: rpm, name: rocky-8 }
          - { image: rockylinux:9, family: rpm, name: rocky-9 }
          - { image: amazonlinux:2023, family: rpm, name: amazonlinux-2023 }
          - { image: alpine:3.20, family: alpine, name: alpine-3.20 }
          - { image: alpine:3.21, family: alpine, name: alpine-3.21 }
          - { image: alpine:3.22, family: alpine, name: alpine-3.22 }
          - { image: archlinux:latest, family: other, name: archlinux-latest }
    steps:
      - uses: actions/checkout@v4
      - name: Download DEB artifact
        uses: actions/download-artifact@v4
        with:
          name: phase-deb
          path: deb
      - name: Download RPM artifact
        uses: actions/download-artifact@v4
        with:
          name: phase-rpm
          path: rpm
      - name: Download APK artifact (amd64)
        uses: actions/download-artifact@v4
        with:
          name: phase_cli_linux_amd64_alpine_${{ inputs.version }}
          path: apk-amd64
        continue-on-error: true
      - name: Download Linux x86_64 binary artifact
        uses: actions/download-artifact@v4
        with:
          name: Linux-binary
          path: linux-amd64
        continue-on-error: true
      - name: Run tests in ${{ matrix.name }} container
        run: |
          set -e
          echo "=== Running in ${{ matrix.image }} ==="
          docker run --rm \
            -v "${PWD}":/workspace \
            -w /workspace \
            ${{ matrix.image }} \
            /bin/sh -ec "\
              echo '=== ldd version ==='; \
              if command -v ldd >/dev/null 2>&1; then ldd --version || true; else echo 'ldd not found'; fi; \
              echo '=== Installing package ==='; \
              case '${{ matrix.family }}' in \
                deb) \
                  apt-get update; \
                  apt-get install -y ca-certificates; \
                  dpkg -i deb/*.deb || apt-get -f install -y; \
                  ;; \
                rpm) \
                  # Prefer installing local RPM without contacting repos (avoids mirror DNS failures)
                  if command -v rpm >/dev/null 2>&1 && rpm -Uvh --nodeps --nosignature ./rpm/*.rpm; then \
                    :; \
                  elif command -v dnf >/dev/null 2>&1; then \
                    dnf install -y --disablerepo='*' ./rpm/*.rpm || rpm -Uvh --nodeps --nosignature ./rpm/*.rpm; \
                  elif command -v microdnf >/dev/null 2>&1; then \
                    microdnf --disablerepo='*' install -y ./rpm/*.rpm || rpm -Uvh --nodeps --nosignature ./rpm/*.rpm; \
                  else \
                    yum --disablerepo='*' install -y ./rpm/*.rpm || rpm -Uvh --nodeps --nosignature ./rpm/*.rpm; \
                  fi; \
                  ;; \
                alpine) \
                  apk update; \
                  apk add --no-cache libstdc++ findutils; \
                  ALP_VER=\$(cut -d. -f1,2 /etc/alpine-release); \
                  if [ "\$ALP_VER" = "3.18" ] || [ "\$ALP_VER" = "3.19" ]; then \
                    echo 'Using binary artifact for Alpine < 3.20'; \
                    BINDIR=\$(find ./linux-amd64 -maxdepth 2 -type f -name phase -printf '%h\n' -quit); \
                    if [ -z "\$BINDIR" ]; then echo 'x86_64 binary artifact not found'; exit 1; fi; \
                    install -Dm755 "\$BINDIR/phase" /usr/local/bin/phase; \
                    if [ -d "\$BINDIR/_internal" ]; then \
                      rm -rf /usr/local/bin/_internal; \
                      cp -a "\$BINDIR/_internal" /usr/local/bin/_internal; \
                    fi; \
                  else \
                    apk add --no-cache --allow-untrusted ./apk-amd64/*.apk; \
                  fi; \
                  ;; \
                other) \
                  echo 'Installing from local x86_64 binary artifact'; \
                  if ! command -v find >/dev/null 2>&1; then \
                    (command -v dnf >/dev/null 2>&1 && dnf install -y findutils) || \
                    (command -v apt-get >/dev/null 2>&1 && apt-get update && apt-get install -y findutils) || \
                    (command -v apk >/dev/null 2>&1 && apk add --no-cache findutils) || \
                    (command -v yum >/dev/null 2>&1 && yum install -y findutils) || \
                    (command -v pacman >/dev/null 2>&1 && pacman -Sy --noconfirm findutils) || true; \
                  fi; \
                  BINDIR=\$(find ./linux-amd64 -maxdepth 2 -type f -name phase -printf '%h\n' -quit); \
                  if [ -z "\$BINDIR" ]; then echo 'x86_64 binary artifact not found'; exit 1; fi; \
                  install -Dm755 "\$BINDIR/phase" /usr/local/bin/phase; \
                  if [ -d "\$BINDIR/_internal" ]; then \
                    rm -rf /usr/local/bin/_internal; \
                    cp -a "\$BINDIR/_internal" /usr/local/bin/_internal; \
                  fi; \
                  ;; \
              esac; \
              # Ensure minimal locale/terminal env for prompt_toolkit/questionary
              export TERM=xterm; \
              export LANG=C.UTF-8; \
              export LC_ALL=C.UTF-8; \
              export PYTHONIOENCODING=UTF-8; \
              echo '=== Verifying ==='; \
              if command -v phase >/dev/null 2>&1; then echo 'phase found'; else echo 'phase not found in PATH'; echo "PATH=$PATH"; ls -l /usr/local/bin || true; ls -l /usr/bin || true; exit 1; fi; \
              echo '=== phase (no args) ==='; \
              phase || true; \
              echo '=== phase -v ==='; \
              phase -v; \
              echo '=== phase users keyring ==='; \
              phase users keyring || true; \
              echo '=== phase --help (head) ==='; \
              phase --help | head -20 || true; \
              echo '=== ldd version (post) ==='; \
              ldd --version || true; \
            "
        shell: bash

  test_install_arm64:
    name: Test install on Linux distros (ARM64)
    continue-on-error: true
    runs-on: ubuntu-22.04-arm
    strategy:
      fail-fast: false
      matrix:
        include:
          - { image: ubuntu:20.04, family: other, name: ubuntu-20.04 }
          - { image: ubuntu:22.04, family: other, name: ubuntu-22.04 }
          - { image: ubuntu:24.04, family: other, name: ubuntu-24.04 }
          - { image: debian:bullseye, family: other, name: debian-bullseye }
          - { image: debian:bookworm, family: other, name: debian-bookworm }
          - { image: debian:trixie, family: other, name: debian-trixie }
          - { image: fedora:39, family: other, name: fedora-39 }
          - { image: fedora:40, family: other, name: fedora-40 }
          - { image: fedora:41, family: other, name: fedora-41 }
          - { image: fedora:42, family: other, name: fedora-42 }
          - { image: amazonlinux:2023, family: other, name: amazonlinux-2023 }
          - { image: alpine:3.20, family: alpine, name: alpine-3.20 }
          - { image: alpine:3.21, family: alpine, name: alpine-3.21 }
          - { image: alpine:3.22, family: alpine, name: alpine-3.22 }
    steps:
      - uses: actions/checkout@v4
      - name: Download APK artifact (arm64)
        uses: actions/download-artifact@v4
        with:
          name: phase_cli_linux_arm64_alpine_${{ inputs.version }}
          path: apk-arm64
        continue-on-error: true
      - name: Download Linux ARM64 binary artifact
        uses: actions/download-artifact@v4
        with:
          name: Linux-binary-arm64
          path: linux-arm64
        continue-on-error: true
      - name: Run tests in ${{ matrix.name }} container
        run: |
          set -e
          echo "=== Running in ${{ matrix.image }} (arm64) ==="
          docker run --rm \
            -v "${PWD}":/workspace \
            -w /workspace \
            ${{ matrix.image }} \
            /bin/sh -ec "\
              echo '=== ldd version ==='; \
              if command -v ldd >/dev/null 2>&1; then ldd --version || true; else echo 'ldd not found'; fi; \
              case '${{ matrix.family }}' in \
                alpine) \
                  apk update; \
                  apk add --no-cache libstdc++; \
                  apk add --no-cache --allow-untrusted ./apk-arm64/*.apk; \
                  ;; \
                other) \
                  echo 'Installing from local ARM64 binary artifact'; \
                  BINDIR=\$(find ./linux-arm64 -maxdepth 2 -type f -name phase -printf '%h\n' -quit); \
                  if [ -z "\$BINDIR" ]; then echo 'ARM64 binary artifact not found'; exit 1; fi; \
                  install -Dm755 "\$BINDIR/phase" /usr/local/bin/phase; \
                  if [ -d "\$BINDIR/_internal" ]; then \
                    rm -rf /usr/local/bin/_internal; \
                    cp -a "\$BINDIR/_internal" /usr/local/bin/_internal; \
                  fi; \
                  ;; \
              esac; \
              # Ensure minimal locale/terminal env for prompt_toolkit/questionary
              export TERM=xterm; \
              export LANG=C.UTF-8; \
              export LC_ALL=C.UTF-8; \
              export PYTHONIOENCODING=UTF-8; \
              echo '=== Verifying ==='; \
              if command -v phase >/dev/null 2>&1; then echo 'phase found'; else echo 'phase not found in PATH'; echo "PATH=$PATH"; ls -l /usr/local/bin || true; ls -l /usr/bin || true; exit 1; fi; \
              echo '=== phase (no args) ==='; \
              phase || true; \
              echo '=== phase -v ==='; \
              phase -v; \
              echo '=== phase users keyring ==='; \
              phase users keyring || true; \
              echo '=== phase --help (head) ==='; \
              phase --help | head -20 || true; \
              echo '=== ldd version (post) ==='; \
              ldd --version || true; \
            "
        shell: bash

