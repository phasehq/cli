name: Build CLI

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      python_version:
        required: true
        type: string
      alpine_version:
        required: true
        type: string

jobs:
  build:
    name: Build CLI
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # ubuntu-22.04 - context: https://github.com/phasehq/cli/issues/94
        # macos-13 darwin-amd64 builds (intel)
        # macos-14 darwin-arm64 builds (apple silicon)
        # context: https://github.com/actions/runner-images?tab=readme-ov-file#available-images

        os: [ubuntu-22.04, windows-2022, macos-13, macos-14]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}
      - run: pip install -r requirements.txt
        if: runner.os != 'Linux'
      - run: pip install pyinstaller
        if: runner.os != 'Linux'
      - run: pyinstaller --hidden-import _cffi_backend --paths ./phase_cli --name phase phase_cli/main.py
        if: runner.os != 'Linux'
      - name: Build Linux binary in manylinux_2_28 container (glibc 2.28 baseline)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          docker run --rm \
            -v "${PWD}":/workspace \
            -w /workspace \
            quay.io/pypa/manylinux_2_28_x86_64 \
            /bin/bash -lc 'set -euo pipefail; \
              echo "=== ldd version (manylinux_2_28 x86_64) ==="; \
              ldd --version; \
              echo "=== Installing build deps ==="; \
              yum -y install wget tar make gcc openssl-devel bzip2-devel libffi-devel zlib-devel >/dev/null; \
              echo "=== Building Python ${{ inputs.python_version }} with --enable-shared ==="; \
              PYVER="${{ inputs.python_version }}"; \
              MAJOR=$(echo "$PYVER" | cut -d. -f1); \
              MINOR=$(echo "$PYVER" | cut -d. -f2); \
              FULLVER=$(curl -s https://www.python.org/ftp/python/ | grep -oE ">${MAJOR}\\.${MINOR}\\.[0-9]+/" | tr -d ">/" | sort -V | tail -1 || echo "$PYVER"); \
              cd /tmp; \
              wget -q https://www.python.org/ftp/python/${FULLVER}/Python-${FULLVER}.tgz; \
              tar -xzf Python-${FULLVER}.tgz; \
              cd Python-${FULLVER}; \
              ./configure --prefix=/opt/py-shared --enable-shared --with-system-openssl >/dev/null; \
              make -j$(nproc) >/dev/null; \
              make install >/dev/null; \
              export LD_LIBRARY_PATH=/opt/py-shared/lib:$LD_LIBRARY_PATH; \
              /opt/py-shared/bin/python3 --version; \
              /opt/py-shared/bin/python3 -c '\''import ssl; print("SSL OK")'\''; \
              /opt/py-shared/bin/python3 -m pip install --upgrade pip >/dev/null; \
              cd /workspace; \
              /opt/py-shared/bin/python3 -m pip install -r requirements.txt >/dev/null; \
              /opt/py-shared/bin/python3 -m pip install pyinstaller >/dev/null; \
              /opt/py-shared/bin/python3 -m PyInstaller --hidden-import _cffi_backend --paths ./phase_cli --name phase phase_cli/main.py'
        shell: bash

      - name: Codesign macOS build output
        if: runner.os == 'macOS'
        run: |
          uname -a
          codesign --force --deep --sign - dist/phase/phase
          codesign --verify --deep --verbose=2 dist/phase/phase
      - name: Print GLIBC version
        if: matrix.os == 'ubuntu-22.04'
        run: ldd --version

      # Set LC_ALL based on the runner OS for Linux and macOS
      - name: Set LC_ALL for Linux and macOS
        run: export LC_ALL=C.UTF-8
        if: runner.os != 'Windows'
        shell: bash

      # Set LC_ALL for Windows
      - name: Set LC_ALL for Windows
        run: echo "LC_ALL=C.UTF-8" | Out-File -Append -Encoding utf8 $env:GITHUB_ENV
        if: runner.os == 'Windows'
        shell: pwsh

      # Build DEB and RPM packages for Linux
      - run: |
          sudo apt-get update
          sudo apt-get install -y ruby-dev rubygems build-essential 
          sudo gem install --no-document fpm
          # Stage files to preserve PyInstaller onedir layout
          rm -rf pkgroot
          mkdir -p pkgroot/usr/lib/phase
          cp -a dist/phase/. pkgroot/usr/lib/phase/
          mkdir -p pkgroot/usr/bin
          ln -sf ../lib/phase/phase pkgroot/usr/bin/phase
          # Build packages from staged root
          fpm -s dir -t deb -n phase -v ${{ inputs.version }} -C pkgroot .
          fpm -s dir -t rpm -n phase -v ${{ inputs.version }} -C pkgroot .
        if: matrix.os == 'ubuntu-22.04'
        shell: bash

      # Upload DEB and RPM packages
      - uses: actions/upload-artifact@v4
        with:
          name: phase-deb
          path: "*.deb"
        if: matrix.os == 'ubuntu-22.04'
      - uses: actions/upload-artifact@v4
        with:
          name: phase-rpm
          path: "*.rpm"
        if: matrix.os == 'ubuntu-22.04'

      - name: Set artifact name
        run: |
          if [[ "${{ matrix.os }}" == "macos-14" ]]; then
            echo "ARTIFACT_NAME=${{ runner.os }}-arm64-binary" >> $GITHUB_ENV
          elif [[ "${{ matrix.os }}" == "macos-13" ]]; then
            echo "ARTIFACT_NAME=${{ runner.os }}-amd64-binary" >> $GITHUB_ENV
          else
            echo "ARTIFACT_NAME=${{ runner.os }}-binary" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: dist/phase*

  build_arm:
    name: Build Linux ARM64
    runs-on: ubuntu-22.04-arm
    steps:
      - uses: actions/checkout@v4
      - name: Build with PyInstaller (manylinux_2_28 aarch64 via docker)
        run: |
          docker run --rm \
            -v "${PWD}":/workspace \
            -w /workspace \
            quay.io/pypa/manylinux_2_28_aarch64 \
            /bin/bash -lc 'set -euo pipefail; \
              echo "=== ldd version (manylinux_2_28 aarch64) ==="; \
              ldd --version; \
              echo "=== Installing build deps ==="; \
              yum -y install wget tar make gcc openssl-devel bzip2-devel libffi-devel zlib-devel >/dev/null; \
              echo "=== Building Python ${{ inputs.python_version }} with --enable-shared ==="; \
              PYVER="${{ inputs.python_version }}"; \
              MAJOR=$(echo "$PYVER" | cut -d. -f1); \
              MINOR=$(echo "$PYVER" | cut -d. -f2); \
              FULLVER=$(curl -s https://www.python.org/ftp/python/ | grep -oE ">${MAJOR}\\.${MINOR}\\.[0-9]+/" | tr -d ">/" | sort -V | tail -1 || echo "$PYVER"); \
              cd /tmp; \
              wget -q https://www.python.org/ftp/python/${FULLVER}/Python-${FULLVER}.tgz; \
              tar -xzf Python-${FULLVER}.tgz; \
              cd Python-${FULLVER}; \
              ./configure --prefix=/opt/py-shared --enable-shared --with-system-openssl >/dev/null; \
              make -j$(nproc) >/dev/null; \
              make install >/dev/null; \
              export LD_LIBRARY_PATH=/opt/py-shared/lib:$LD_LIBRARY_PATH; \
              /opt/py-shared/bin/python3 --version; \
              /opt/py-shared/bin/python3 -c '\''import ssl; print("SSL OK")'\''; \
              /opt/py-shared/bin/python3 -m pip install --upgrade pip >/dev/null; \
              cd /workspace; \
              /opt/py-shared/bin/python3 -m pip install -r requirements.txt >/dev/null; \
              /opt/py-shared/bin/python3 -m pip install pyinstaller >/dev/null; \
              /opt/py-shared/bin/python3 -m PyInstaller --hidden-import _cffi_backend --paths ./phase_cli --name phase phase_cli/main.py'
      - uses: actions/upload-artifact@v4
        with:
          name: Linux-binary-arm64
          path: dist/phase*

  build_apk:
    name: Build Alpine
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - { os: ubuntu-22.04, arch: x86_64 }
          - { os: ubuntu-22.04-arm, arch: aarch64 }
    steps:
      - uses: actions/checkout@v4
      - name: Build Alpine package
        run: |
          if [ "${{ matrix.arch }}" = "aarch64" ]; then
            TARGET_ARCH="arm64"
          elif [ "${{ matrix.arch }}" = "x86_64" ]; then
            TARGET_ARCH="amd64"
          fi

          # CONTEXT: phase_cli_linux_<ARCH>_alpine_<VERSION> artifact will contain phase_cli_linux_<ARCH>_<VERSION>.apk
          
          OUTPUT_PACKAGE_NAME="phase_cli_linux_${TARGET_ARCH}_${{ inputs.version }}.apk"
          ARTIFACT_NAME="phase_cli_linux_${TARGET_ARCH}_alpine_${{ inputs.version }}"

          echo "OUTPUT_PACKAGE_NAME=$OUTPUT_PACKAGE_NAME" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV

          mkdir -p ./output
          docker run --rm \
            -v "${PWD}":/workspace \
            -w /workspace \
            --env ABUILD_USER=builder \
            --env ARCH=${{ matrix.arch }} \
            --env OUTPUT_PACKAGE_NAME="$OUTPUT_PACKAGE_NAME" \
            alpine:${{ inputs.alpine_version }} \
            /bin/sh -ec " \
              set -ex; \
              apk update; \
              apk add --no-cache alpine-sdk python3 python3-dev py3-pip build-base git curl sudo doas; \
              adduser -D builder; \
              addgroup builder abuild; \
              echo 'builder ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers; \
              echo 'permit nopass builder as root' >> /etc/doas.conf; \
              chown -R builder /workspace; \
              sudo -u builder /bin/sh -ec 'cd /workspace && export HOME=/home/builder && abuild-keygen -a -i -n'; \
              sudo -u builder /bin/sh -ec 'cd /workspace && abuild -r'; \
              SOURCE_APK=\$(find /home/builder/packages/\$ARCH -name 'phase-*.apk' -print -quit); \
              cp \"\$SOURCE_APK\" \"/workspace/output/\$OUTPUT_PACKAGE_NAME\" \
            "
      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./output/${{ env.OUTPUT_PACKAGE_NAME }}

# Test install on Linux distros (x86_64) TODO: REMOVE

  test_install_x86_64:
    name: Test install on Linux distros (x86_64)
    needs: [build, build_apk]
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - { image: ubuntu:20.04, family: deb, name: ubuntu-20.04 }
          - { image: ubuntu:22.04, family: deb, name: ubuntu-22.04 }
          - { image: ubuntu:24.04, family: deb, name: ubuntu-24.04 }
          - { image: debian:bullseye, family: deb, name: debian-bullseye }
          - { image: debian:bookworm, family: deb, name: debian-bookworm }
          - { image: debian:trixie, family: deb, name: debian-trixie }
          - { image: fedora:39, family: rpm, name: fedora-39 }
          - { image: fedora:40, family: rpm, name: fedora-40 }
          - { image: fedora:41, family: rpm, name: fedora-41 }
          - { image: fedora:42, family: rpm, name: fedora-42 }
          - { image: centos:7, family: rpm, name: centos-7 }
          - { image: quay.io/centos/centos:stream8, family: rpm, name: centos-stream8 }
          - { image: quay.io/centos/centos:stream9, family: rpm, name: centos-stream9 }
          - { image: quay.io/centos/centos:stream10, family: rpm, name: centos-stream10 }
          - { image: rockylinux:8, family: rpm, name: rocky-8 }
          - { image: rockylinux:9, family: rpm, name: rocky-9 }
          - { image: amazonlinux:2, family: rpm, name: amazonlinux-2 }
          - { image: amazonlinux:2023, family: rpm, name: amazonlinux-2023 }
          - { image: alpine:3.20, family: alpine, name: alpine-3.20 }
          - { image: alpine:3.21, family: alpine, name: alpine-3.21 }
          - { image: alpine:3.22, family: alpine, name: alpine-3.22 }
          - { image: archlinux:latest, family: other, name: archlinux-latest }
    steps:
      - uses: actions/checkout@v4
      - name: Download DEB artifact
        uses: actions/download-artifact@v4
        with:
          name: phase-deb
          path: deb
      - name: Download RPM artifact
        uses: actions/download-artifact@v4
        with:
          name: phase-rpm
          path: rpm
      - name: Download APK artifact (amd64)
        uses: actions/download-artifact@v4
        with:
          name: phase_cli_linux_amd64_alpine_${{ inputs.version }}
          path: apk-amd64
        continue-on-error: true
      - name: Run tests in ${{ matrix.name }} container
        run: |
          set -e
          echo "=== Running in ${{ matrix.image }} ==="
          docker run --rm \
            -v "${PWD}":/workspace \
            -w /workspace \
            ${{ matrix.image }} \
            /bin/sh -ec "\
              echo '=== ldd version ==='; \
              if command -v ldd >/dev/null 2>&1; then ldd --version || true; else echo 'ldd not found'; fi; \
              echo '=== Installing package ==='; \
              case '${{ matrix.family }}' in \
                deb) \
                  apt-get update; \
                  apt-get install -y ca-certificates; \
                  dpkg -i deb/*.deb || apt-get -f install -y; \
                  ;; \
                rpm) \
                  if command -v dnf >/dev/null 2>&1; then \
                    dnf install -y rpm || true; \
                    dnf install -y rpm-build || true; \
                    dnf install -y ./rpm/*.rpm; \
                  elif command -v microdnf >/dev/null 2>&1; then \
                    microdnf install -y ./rpm/*.rpm; \
                  else \
                    yum install -y ./rpm/*.rpm || rpm -Uvh ./rpm/*.rpm; \
                  fi; \
                  ;; \
                alpine) \
                  apk update; \
                  apk add --no-cache libstdc++; \
                  ALP_VER=\$(cut -d. -f1,2 /etc/alpine-release); \
                  if [ "\$ALP_VER" = "3.18" ] || [ "\$ALP_VER" = "3.19" ]; then \
                    echo 'Using installer for Alpine < 3.20'; \
                    chmod +x ./install.sh; \
                    ./install.sh --version '${{ inputs.version }}'; \
                  else \
                    apk add --no-cache --allow-untrusted ./apk-amd64/*.apk; \
                  fi; \
                  ;; \
                other) \
                  chmod +x ./install.sh; \
                  ./install.sh --version '${{ inputs.version }}'; \
                  ;; \
              esac; \
              # Ensure minimal locale/terminal env for prompt_toolkit/questionary
              export TERM=xterm; \
              export LANG=C.UTF-8; \
              export LC_ALL=C.UTF-8; \
              export PYTHONIOENCODING=UTF-8; \
              echo '=== Verifying ==='; \
              if command -v phase >/dev/null 2>&1; then echo 'phase found'; else echo 'phase not found in PATH'; echo "PATH=$PATH"; ls -l /usr/local/bin || true; ls -l /usr/bin || true; exit 1; fi; \
              echo '=== phase (no args) ==='; \
              phase || true; \
              echo '=== phase -v ==='; \
              phase -v; \
              echo '=== phase users keyring ==='; \
              phase users keyring || true; \
              echo '=== phase --help (head) ==='; \
              phase --help | head -20 || true; \
              echo '=== ldd version (post) ==='; \
              ldd --version || true; \
            "
        shell: bash

  test_install_arm64:
    name: Test install on Linux distros (ARM64)
    needs: [build_arm, build_apk]
    runs-on: ubuntu-22.04-arm
    strategy:
      fail-fast: false
      matrix:
        include:
          # Add arm64 deb & rpm packages
          - { image: ubuntu:20.04, family: other, name: ubuntu-20.04 }
          - { image: ubuntu:22.04, family: other, name: ubuntu-22.04 }
          - { image: ubuntu:24.04, family: other, name: ubuntu-24.04 }
          - { image: debian:bullseye, family: other, name: debian-bullseye }
          - { image: debian:bookworm, family: other, name: debian-bookworm }
          - { image: debian:trixie, family: other, name: debian-trixie }
          - { image: fedora:39, family: other, name: fedora-39 }
          - { image: fedora:40, family: other, name: fedora-40 }
          - { image: fedora:41, family: other, name: fedora-41 }
          - { image: fedora:42, family: other, name: fedora-42 }
          # - { image: rockylinux:8, family: other, name: rocky-8 }
          # - { image: rockylinux:9, family: other, name: rocky-9 }
          - { image: amazonlinux:2023, family: other, name: amazonlinux-2023 }
          - { image: alpine:3.20, family: alpine, name: alpine-3.20 }
          - { image: alpine:3.21, family: alpine, name: alpine-3.21 }
          - { image: alpine:3.22, family: alpine, name: alpine-3.22 }
    steps:
      - uses: actions/checkout@v4
      - name: Download APK artifact (arm64)
        uses: actions/download-artifact@v4
        with:
          name: phase_cli_linux_arm64_alpine_${{ inputs.version }}
          path: apk-arm64
        continue-on-error: true
      - name: Run tests in ${{ matrix.name }} container
        run: |
          set -e
          echo "=== Running in ${{ matrix.image }} (arm64) ==="
          docker run --rm \
            -v "${PWD}":/workspace \
            -w /workspace \
            ${{ matrix.image }} \
            /bin/sh -ec "\
              echo '=== ldd version ==='; \
              if command -v ldd >/dev/null 2>&1; then ldd --version || true; else echo 'ldd not found'; fi; \
              case '${{ matrix.family }}' in \
                alpine) \
                  apk update; \
                  apk add --no-cache libstdc++; \
                  apk add --no-cache --allow-untrusted ./apk-arm64/*.apk; \
                  ;; \
                other) \
                  chmod +x ./install.sh; \
                  ./install.sh --version '${{ inputs.version }}'; \
                  ;; \
              esac; \
              # Ensure minimal locale/terminal env for prompt_toolkit/questionary
              export TERM=xterm; \
              export LANG=C.UTF-8; \
              export LC_ALL=C.UTF-8; \
              export PYTHONIOENCODING=UTF-8; \
              echo '=== Verifying ==='; \
              if command -v phase >/dev/null 2>&1; then echo 'phase found'; else echo 'phase not found in PATH'; echo "PATH=$PATH"; ls -l /usr/local/bin || true; ls -l /usr/bin || true; exit 1; fi; \
              echo '=== phase (no args) ==='; \
              phase || true; \
              echo '=== phase -v ==='; \
              phase -v; \
              echo '=== phase users keyring ==='; \
              phase users keyring || true; \
              echo '=== phase --help (head) ==='; \
              phase --help | head -20 || true; \
              echo '=== ldd version (post) ==='; \
              ldd --version || true; \
            "
        shell: bash
