name: Build and deploy cli packages

on:
  pull_request:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.11]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - run: pip install -r requirements.txt
      - run: pip install pyinstaller
      - run: pyinstaller --onefile --name phase phase-cli.py
      - run: export LC_ALL=C.UTF-8
      - run: echo "PHASE_CLI_VERSION=$(grep -oP '(?<=__version__ = ")[^"]*' utils/const.py)" >> $GITHUB_ENV
        shell: bash
      - run: echo "${{ env.PHASE_CLI_VERSION }}" > ./PHASE_CLI_VERSION.txt
      - uses: actions/upload-artifact@v2
        with:
          name: phase-version
          path: ./PHASE_CLI_VERSION.txt
      - run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y ruby-dev rubygems build-essential 
            sudo gem install --no-document fpm
            fpm -s dir -t deb -n phase -v $PHASE_CLI_VERSION dist/phase=/usr/bin/
            fpm -s dir -t rpm -n phase -v $PHASE_CLI_VERSION dist/phase=/usr/bin/
          fi
        shell: bash
      - uses: actions/upload-artifact@v2
        with:
          name: phase-deb
          path: "*.deb"
      - uses: actions/upload-artifact@v2
        with:
          name: phase-rpm
          path: "*.rpm"
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-binary
          path: dist/phase*

  build_apk:
    name: Build APK
    runs-on: ubuntu-latest
    container:
      image: python:3.11-alpine
    steps:
      - uses: actions/checkout@v2
      - run: apk add --update --no-cache python3 python3-dev build-base
      - run: python3 -m ensurepip
      - run: pip3 install --no-cache --upgrade pip setuptools
      - run: pip install -r requirements.txt
      - run: pip install pyinstaller
      - run: pyinstaller --onefile --name phase phase-cli.py
      - run: apk add alpine-sdk
      - run: adduser -G abuild -g "Alpine Package Builder" -s /bin/ash -D builder
      - run: mkdir /home/builder/package
      - run: chown builder /home/builder/package
      - run: apk add --no-cache sudo
      - run: |
          echo "builder ALL=(ALL) NOPASSWD: ALL" | sudo tee -a /etc/sudoers
          cp ./dist/phase /home/builder/package
          cp ./APKBUILD /home/builder/package
          cd /home/builder/package
          sudo -u builder abuild-keygen -a -i -n
          sudo -u builder abuild checksum
          sudo -u builder abuild -r
        shell: sh
      - uses: actions/upload-artifact@v2
        with:
          name: phase-apk
          path: /home/builder/packages/builder/x86_64/*.apk
      - uses: actions/upload-artifact@v2
        with:
          name: phase-alpine-build
          path: ./dist/phase

  test_installs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distro: ["ubuntu", "fedora", "alpine", "archlinux"]
        include:
          - distro: "ubuntu"
            image: "ubuntu:latest"
            install_command: "apt-get update && apt-get install -y curl bash"
          - distro: "fedora"
            image: "fedora:latest"
            install_command: "dnf -y install curl bash"
          - distro: "alpine"
            image: "alpine:latest"
            install_command: "apk add --no-cache curl bash"
          - distro: "archlinux"
            image: "archlinux:latest"
            install_command: "pacman -Sy --noconfirm curl sudo wget bash"
    container:
      image: ${{ matrix.image }}
    steps:
      - run: ${{ matrix.install_command }}
      - run: curl -fsSL https://pkg.phase.dev/install.sh | bash
      - run: phase
      - run: phase -v

  test_windows:
    runs-on: windows-latest
    steps:
      - run: Invoke-WebRequest -Uri "https://pkg.phase.dev/install.sh" -OutFile "install.sh"
      - run: bash install.sh
      - run: phase
      - run: phase -v

  test_mac:
    runs-on: macOS-latest
    steps:
      - run: curl -fsSL https://pkg.phase.dev/install.sh | bash
      - run: phase
      - run: phase -v

  build_docker:
    needs: build_apk
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download phase-alpine-build artifact
        uses: actions/download-artifact@v2
        with:
          name: phase-alpine-build
          path: dist
      - run: docker build -t phase-cli:latest .
      - run: docker save phase-cli:latest > phase-cli.tar
      - uses: actions/upload-artifact@v2
        with:
          name: phase-docker-image
          path: ./phase-cli.tar

  test_docker_image:
    needs: build_docker
    runs-on: ubuntu-latest
    steps:
      - name: Download phase-docker-image artifact
        uses: actions/download-artifact@v2
        with:
          name: phase-docker-image
          path: .
      - run: docker load < phase-cli.tar
      - run: docker run phasehq/cli:latest phase
      - run: docker run phasehq/cli:latest phase -v
