name: Build CLI

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      python_version:
        required: true
        type: string

jobs:
  build:
    name: Build CLI
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # ubuntu-20.04 - context: https://github.com/phasehq/cli/issues/94
        # macos-13 darwin-amd64 builds (intel)
        # macos-14 darwin-arm64 builds (apple silicon)
        # context: https://github.com/actions/runner-images?tab=readme-ov-file#available-images

        os: [ubuntu-20.04, windows-2022, macos-13, macos-14]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.python_version }}
      - run: pip install -r requirements.txt
      - run: pip install pyinstaller
      - run: pyinstaller --hidden-import _cffi_backend --paths ./phase_cli --name phase phase_cli/main.py
      - name: Print GLIBC version
        if: matrix.os == 'ubuntu-20.04'
        run: ldd --version

      # Set LC_ALL based on the runner OS for Linux and macOS
      - name: Set LC_ALL for Linux and macOS
        run: export LC_ALL=C.UTF-8
        if: runner.os != 'Windows'
        shell: bash

      # Set LC_ALL for Windows
      - name: Set LC_ALL for Windows
        run: echo "LC_ALL=C.UTF-8" | Out-File -Append -Encoding utf8 $env:GITHUB_ENV
        if: runner.os == 'Windows'
        shell: pwsh

      # # Download the version file
      # - uses: actions/download-artifact@v4
      #   with:
      #     name: phase-version
      
      # # DEBUG
      # - name: List files after downloading artifact
      #   shell: bash
      #   run: ls -al

      # # Set the version environment variable
      # - name: Set VERSION
      #   shell: bash
      #   run: |
      #     PHASE_CLI_VERSION=$(cat PHASE_CLI_VERSION.txt)
      #     echo "PHASE_CLI_VERSION is: $PHASE_CLI_VERSION"
      #     echo "PHASE_CLI_VERSION=$PHASE_CLI_VERSION" >> $GITHUB_ENV

      # Build DEB and RPM packages for Linux
      - run: |
          sudo apt-get update
          sudo apt-get install -y ruby-dev rubygems build-essential 
          sudo gem install --no-document fpm
          fpm -s dir -t deb -n phase -v ${{ inputs.version }} dist/phase/=usr/bin/
          fpm -s dir -t rpm -n phase -v ${{ inputs.version }} dist/phase/=usr/bin/
        if: matrix.os == 'ubuntu-20.04'
        shell: bash

      # Upload DEB and RPM packages
      - uses: actions/upload-artifact@v4
        with:
          name: phase-deb
          path: "*.deb"
        if: matrix.os == 'ubuntu-20.04'
      - uses: actions/upload-artifact@v4
        with:
          name: phase-rpm
          path: "*.rpm"
        if: matrix.os == 'ubuntu-20.04'

      - name: Set artifact name
        run: |
          if [[ "${{ matrix.os }}" == "macos-14" ]]; then
            echo "ARTIFACT_NAME=${{ runner.os }}-arm64-binary" >> $GITHUB_ENV
          elif [[ "${{ matrix.os }}" == "macos-13" ]]; then
            echo "ARTIFACT_NAME=${{ runner.os }}-amd64-binary" >> $GITHUB_ENV
          else
            echo "ARTIFACT_NAME=${{ runner.os }}-binary" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: dist/phase*

  build_arm:
    name: Build Linux ARM64
    runs-on: self-hosted
    container:
      image: python:3.11.0-bullseye
    steps:
      - uses: actions/checkout@v4
      - name: Setup Environment
        run: |
          python --version
          pip install -r requirements.txt
          pip install pyinstaller
      - name: Build with PyInstaller
        run: pyinstaller --hidden-import _cffi_backend --paths ./phase_cli --name phase phase_cli/main.py
      - uses: actions/upload-artifact@v4
        with:
          name: Linux-binary-arm64
          path: dist/phase*

  build_apk:
    name: Build Alpine
    runs-on: ubuntu-20.04
    container:
      image: python:3.11-alpine
    steps:
      - uses: actions/checkout@v4
      - run: apk add --update --no-cache python3 python3-dev build-base
      - run: python3 -m ensurepip
      - run: pip3 install --no-cache --upgrade pip setuptools
      - run: pip install -r requirements.txt
      - run: pip install pyinstaller
      - run: pyinstaller --hidden-import _cffi_backend --paths ./phase_cli --name phase phase_cli/main.py
      - run: apk add alpine-sdk
      - run: adduser -G abuild -g "Alpine Package Builder" -s /bin/ash -D builder
      - run: mkdir /home/builder/package
      - run: chown builder /home/builder/package
      - run: apk add --no-cache sudo
      - run: |
          echo "builder ALL=(ALL) NOPASSWD: ALL" | sudo tee -a /etc/sudoers
          ls ./dist/phase
          cp -r ./dist/phase/* /home/builder/package/
          cp ./APKBUILD /home/builder/package
          cd /home/builder/package
          sudo -u builder abuild-keygen -a -i -n
          sudo -u builder abuild checksum
          sudo -u builder abuild -r
        shell: sh
      - uses: actions/upload-artifact@v4
        with:
          name: phase-apk
          path: /home/builder/packages/builder/x86_64/*.apk
