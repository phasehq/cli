name: Build and deploy cli packages

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.11]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - run: pip install -r requirements.txt
      - run: pip install pyinstaller
      - run: pyinstaller --onefile --name phase phase-cli.py
      - name: Extract version
        run: |
          export LC_ALL=C.UTF-8
          echo "PHASE_CLI_VERSION=$(grep -oP '(?<=__version__ = ")[^"]*' utils/const.py)" >> $GITHUB_ENV
        shell: bash
      - run: echo "${{ env.PHASE_CLI_VERSION }}" > ./PHASE_CLI_VERSION.txt
      - uses: actions/upload-artifact@v2
        with:
          name: phase-version
          path: ./PHASE_CLI_VERSION.txt
      - name: Build DEB and RPM if Linux
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            sudo apt-get install -y ruby-dev rubygems build-essential 
            sudo gem install --no-document fpm
            fpm -s dir -t deb -n phase -v $PHASE_CLI_VERSION dist/phase=/usr/bin/
            fpm -s dir -t rpm -n phase -v $PHASE_CLI_VERSION dist/phase=/usr/bin/
          fi
        shell: bash
      - uses: actions/upload-artifact@v2
        with:
          name: phase-deb
          path: "*.deb"
      - uses: actions/upload-artifact@v2
        with:
          name: phase-rpm
          path: "*.rpm"
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-binary
          path: dist/phase*

  build_apk:
    name: Build APK
    runs-on: ubuntu-latest
    container:
      image: python:3.11-alpine
    steps:
      - uses: actions/checkout@v2
      - run: |
          apk add --update --no-cache python3 python3-dev build-base 
          python3 -m ensurepip
          pip3 install --no-cache --upgrade pip setuptools
      - run: pip install -r requirements.txt
      - run: pip install pyinstaller
      - run: pyinstaller --onefile --name phase phase-cli.py
      - run: apk add alpine-sdk
      - run: |
          adduser -G abuild -g "Alpine Package Builder" -s /bin/ash -D builder
          mkdir /home/builder/package
          chown builder /home/builder/package
      - run: apk add --no-cache sudo
      - run: |
          echo "builder ALL=(ALL) NOPASSWD: ALL" | sudo tee -a /etc/sudoers
          cp ./dist/phase /home/builder/package
          cp ./APKBUILD /home/builder/package
          cd /home/builder/package
          sudo -u builder abuild-keygen -a -i -n
          sudo -u builder abuild checksum
          sudo -u builder abuild -r
        shell: sh
      - uses: actions/upload-artifact@v2
        with:
          name: phase-apk
          path: /home/builder/packages/builder/x86_64/*.apk

  deploy_to_s3:
    needs: [build, build_apk]
    name: Deploy packages to S3
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: Extract version
        run: |
          echo "PHASE_CLI_VERSION=$(grep -oP '(?<=__version__ = ")[^"]*' utils/const.py)" >> $GITHUB_ENV
        shell: bash
      - name: Organize files for S3
        run: |
          mkdir -p deb rpm apk windows macos linux-bin latest
          # Sync package versions
          mv artifacts/phase-deb/*.deb deb/phase_cli_amd64_${{ env.PHASE_CLI_VERSION }}.deb
          mv artifacts/phase-rpm/*.rpm rpm/phase_cli_amd64_${{ env.PHASE_CLI_VERSION }}.rpm
          mv artifacts/phase-apk/*.apk apk/phase_cli_amd64_${{ env.PHASE_CLI_VERSION }}.apk
          mv artifacts/Linux-binary/* linux-bin/phase_cli_linux_amd64_${{ env.PHASE_CLI_VERSION }}
          mv artifacts/Windows-binary/* windows/phase_cli_windows_amd64_${{ env.PHASE_CLI_VERSION }}.exe
          mv artifacts/macOS-binary/* macos/phase_cli_macos_amd64_${{ env.PHASE_CLI_VERSION }}

          # Checksums
          find . -type f \( -iname \*.deb -o -iname \*.rpm -o -iname \*.apk -o -iname \*.exe -o -name phase \) -exec sh -c 'sha512sum {} > {}.sha512' \;

          # Sync latest packages
          cp deb/phase_cli_amd64_${{ env.PHASE_CLI_VERSION }}.deb latest/phase_cli_amd64_latest.deb
          cp deb/phase_cli_amd64_${{ env.PHASE_CLI_VERSION }}.deb.sha512 latest/phase_cli_amd64_latest.deb.sha512
          cp rpm/phase_cli_amd64_${{ env.PHASE_CLI_VERSION }}.rpm latest/phase_cli_amd64_latest.rpm
          cp rpm/phase_cli_amd64_${{ env.PHASE_CLI_VERSION }}.rpm.sha512 latest/phase_cli_amd64_latest.rpm.sha512
          cp apk/phase_cli_amd64_${{ env.PHASE_CLI_VERSION }}.apk latest/phase_cli_amd64_latest.apk
          cp apk/phase_cli_amd64_${{ env.PHASE_CLI_VERSION }}.apk.sha512 latest/phase_cli_amd64_latest.apk.sha512
          cp linux-bin/phase_cli_linux_amd64_${{ env.PHASE_CLI_VERSION }} latest/phase_cli_linux_amd64_latest
          cp linux-bin/phase_cli_linux_amd64_${{ env.PHASE_CLI_VERSION }}.sha512 latest/phase_cli_linux_amd64_latest.sha512
          cp windows/phase_cli_windows_amd64_${{ env.PHASE_CLI_VERSION }}.exe latest/phase_cli_windows_amd64_latest.exe
          cp windows/phase_cli_windows_amd64_${{ env.PHASE_CLI_VERSION }}.exe.sha512 latest/phase_cli_windows_amd64_latest.exe.sha512
          cp macos/phase_cli_macos_amd64_${{ env.PHASE_CLI_VERSION }} latest/phase_cli_macos_amd64_latest
          cp macos/phase_cli_macos_amd64_${{ env.PHASE_CLI_VERSION }}.sha512 latest/phase_cli_macos_amd64_latest.sha512

      - uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Sync install script
        run: |
          aws s3 cp ./install.sh s3://${{ secrets.AWS_S3_BUCKET }}/install.sh --acl public-read
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
