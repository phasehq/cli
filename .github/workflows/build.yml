name: PyInstaller Build

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.11]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Build with PyInstaller
        run: pyinstaller --onefile --name phase phase-cli.py

      - name: Extract version
        run: |
          export LC_ALL=C.UTF-8
          echo "PHASE_CLI_VERSION=$(grep -oP '(?<=__version__ = ")[^"]*' phase-cli.py)" >> $GITHUB_ENV

      - name: Install FPM
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            sudo apt-get install -y ruby-dev rubygems build-essential && sudo gem install --no-document fpm
            fpm -s dir -t deb -n phase -v $PHASE_CLI_VERSION dist/phase=/
            fpm -s dir -t rpm -n phase -v $PHASE_CLI_VERSION dist/phase=/
          fi

      - name: Install Docker
        run: |
          if [ "${{ runner.os }}" == "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            echo -e "FROM alpine:latest\nRUN apk add -U alpine-sdk\nRUN adduser -D builder\nUSER builder\nCOPY . /src\nWORKDIR /src\nCMD abuild -rK" > Dockerfile
            docker build -t alpine-build .
            docker run --user builder -v $PWD:/src alpine-build
            mv /src/packages/src/*.apk .
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: phase-package
          path: |
            *.deb
            *.rpm
            *.apk
            dist/*
