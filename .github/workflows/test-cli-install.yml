name: Test CLI Installation

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string

jobs:
  test-cli-install:
    strategy:
      matrix:
        distro: ['ubuntu-latest', 'fedora-latest', 'alpine-latest', 'archlinux-latest']
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.distro == 'ubuntu-latest' && 'ubuntu:latest' || matrix.distro == 'fedora-latest' && 'fedora:latest' || matrix.distro == 'alpine-latest' && 'alpine:latest' || matrix.distro == 'archlinux-latest' && 'archlinux:latest' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Alpine)
        if: matrix.distro == 'alpine-latest'
        run: apk add --no-cache bash

      - name: Install dependencies (Arch Linux)
        if: matrix.distro == 'archlinux-latest'
        run: pacman -Sy --noconfirm bash

      - name: Run install script
        run: |
          chmod +x ./install.sh
          ./install.sh

      - name: Check CLI version
        run: |
          installed_version=$(phase -v)
          expected_version=${{ inputs.version }}
          if [ "$installed_version" != "$expected_version" ]; then
            echo "Version mismatch: Expected $expected_version, got $installed_version"
            exit 1
          fi
          echo "CLI version matches: $installed_version"

  test-cli-install-arm64:
    runs-on: self-hosted
    container:
      image: python:3.11.0-bullseye
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run install script
        run: |
          chmod +x ./install.sh
          ./install.sh

      - name: Check CLI version
        run: |
          installed_version=$(phase -v)
          expected_version=${{ inputs.version }}
          if [ "$installed_version" != "$expected_version" ]; then
            echo "Version mismatch: Expected $expected_version, got $installed_version"
            exit 1
          fi
          echo "CLI version matches: $installed_version"
