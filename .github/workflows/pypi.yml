name: Build and Deploy to PyPI

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
    secrets:
      PYPI_USERNAME:
        required: true
      PYPI_PASSWORD:
        required: true

jobs:
  build_and_deploy:
    name: Build and Deploy to PyPI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine

      # Versioning is handled in setup.py
      - name: Build distribution
        run: python setup.py sdist bdist_wheel

      - name: Upload to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: twine upload dist/*

      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  pull_and_test:
    name: Pull and Test PyPI Package
    needs: build_and_deploy
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install package from PyPI
        run: |
          python -m pip install --upgrade pip
          pip install phase-cli

      - name: Test installed package (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          installed_version=$(phase -v)
          echo "Installed version: $installed_version"
          echo "Expected version: ${{ inputs.version }}"
          if [ "$installed_version" != "${{ inputs.version }}" ]; then
            echo "Version mismatch!"
            exit 1
          fi

      - name: Test installed package (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $installed_version = phase -v
          echo "Installed version: $installed_version"
          echo "Expected version: ${{ inputs.version }}"
          if ($installed_version -ne "${{ inputs.version }}") {
            echo "Version mismatch!"
            exit 1
          }