name: Docker Build, Push, and Test

on:
  workflow_call:
    secrets:
      DOCKER_HUB_USERNAME:
        required: true
      DOCKER_HUB_PASSWORD:
        required: true

jobs:
  build_push:
    name: Build & Release - Docker
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Download phase-version artifact
        uses: actions/download-artifact@v4
        with:
          name: phase-version
          path: phase-version

      - name: Set VERSION from file
        run: echo "VERSION=$(cat ./phase-version/PHASE_CLI_VERSION.txt | tr -d '\r')" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            phasehq/cli:${{ env.VERSION }}
            phasehq/cli:latest

  pull_test:
    name: Test - CLI - Docker
    needs: build_push
    runs-on: ubuntu-20.04
    steps:
      - name: Download phase-version artifact
        uses: actions/download-artifact@v4
        with:
          name: phase-version
          path: phase-version

      - name: Set VERSION from file
        run: echo "VERSION=$(cat ./phase-version/PHASE_CLI_VERSION.txt | tr -d '\r')" >> $GITHUB_ENV

      # Pull and test the versioned Docker image
      - name: Pull versioned image
        run: docker pull phasehq/cli:${{ env.VERSION }}

      - name: Test versioned image version
        run: |
          RETURNED_VERSION=$(docker run phasehq/cli:${{ env.VERSION }} --version | awk '{print $2}')
          if [ "$RETURNED_VERSION" != "${{ env.VERSION }}" ]; then
            echo "Version mismatch: Expected ${{ env.VERSION }}, got $RETURNED_VERSION"
            exit 1
          fi

      # Pull and test the latest Docker image
      - name: Pull latest image
        run: docker pull phasehq/cli:latest

      - name: Test latest image version
        run: |
          RETURNED_VERSION=$(docker run phasehq/cli:latest --version | awk '{print $2}')
          if [ "$RETURNED_VERSION" != "${{ env.VERSION }}" ]; then
            echo "Version mismatch: Expected ${{ env.VERSION }}, got $RETURNED_VERSION"
            exit 1
          fi