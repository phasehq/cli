name: Build, Test, and Attach Artifacts to Release

on:
  pull_request:
  push:
    branches:
      - main
  release:
    types:
      - published

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    name: Build CLI
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.11]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - run: pip install -r requirements.txt
      - run: pip install pyinstaller
      - run: pyinstaller --hidden-import _cffi_backend --onefile --name phase phase-cli.py

      # Set LC_ALL based on the runner OS for Linux and macOS
      - name: Set LC_ALL for Linux and macOS
        run: export LC_ALL=C.UTF-8
        if: runner.os != 'Windows'
        shell: bash

      # Set LC_ALL for Windows
      - name: Set LC_ALL for Windows
        run: echo "LC_ALL=C.UTF-8" | Out-File -Append -Encoding utf8 $env:GITHUB_ENV
        if: runner.os == 'Windows'
        shell: pwsh

      # Extract version
      - run: echo "PHASE_CLI_VERSION=$(grep -oP '(?<=__version__ = ")[^"]*' utils/const.py)" >> $GITHUB_ENV
        shell: bash
      - run: echo "${{ env.PHASE_CLI_VERSION }}" > ./PHASE_CLI_VERSION.txt

      # Upload version
      - uses: actions/upload-artifact@v2
        with:
          name: phase-version
          path: ./PHASE_CLI_VERSION.txt

      # Build DEB and RPM packages for Linux
      - run: |
          sudo apt-get update
          sudo apt-get install -y ruby-dev rubygems build-essential 
          sudo gem install --no-document fpm
          fpm -s dir -t deb -n phase -v $PHASE_CLI_VERSION dist/phase=/usr/bin/
          fpm -s dir -t rpm -n phase -v $PHASE_CLI_VERSION dist/phase=/usr/bin/
        if: matrix.os == 'ubuntu-latest'
        shell: bash

      # Upload DEB and RPM packages
      - uses: actions/upload-artifact@v2
        with:
          name: phase-deb
          path: "*.deb"
        if: matrix.os == 'ubuntu-latest'
      - uses: actions/upload-artifact@v2
        with:
          name: phase-rpm
          path: "*.rpm"
        if: matrix.os == 'ubuntu-latest'

      # Upload binary
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ runner.os }}-binary
          path: dist/phase*

  build_apk:
    name: Build CLI (alpine-latest, 3.11)
    runs-on: ubuntu-latest
    container:
      image: python:3.11-alpine
    steps:
      - uses: actions/checkout@v2
      - run: apk add --update --no-cache python3 python3-dev build-base
      - run: python3 -m ensurepip
      - run: pip3 install --no-cache --upgrade pip setuptools
      - run: pip install -r requirements.txt
      - run: pip install pyinstaller
      - run: pyinstaller --hidden-import _cffi_backend --onefile --name phase phase-cli.py
      - run: apk add alpine-sdk
      - run: adduser -G abuild -g "Alpine Package Builder" -s /bin/ash -D builder
      - run: mkdir /home/builder/package
      - run: chown builder /home/builder/package
      - run: apk add --no-cache sudo
      - run: |
          echo "builder ALL=(ALL) NOPASSWD: ALL" | sudo tee -a /etc/sudoers
          cp ./dist/phase /home/builder/package
          cp ./APKBUILD /home/builder/package
          cd /home/builder/package
          sudo -u builder abuild-keygen -a -i -n
          sudo -u builder abuild checksum
          sudo -u builder abuild -r
        shell: sh
      - uses: actions/upload-artifact@v2
        with:
          name: phase-apk
          path: /home/builder/packages/builder/x86_64/*.apk
      - uses: actions/upload-artifact@v2
        with:
          name: phase-alpine-build
          path: ./dist/phase

  Test_Linux_cli:
    name: Test - CLI installation - Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distro: ["ubuntu", "fedora", "alpine", "archlinux"]
        include:
          - distro: "ubuntu"
            image: "ubuntu:latest"
            install_command: "apt-get update && apt-get install -y curl bash"
          - distro: "fedora"
            image: "fedora:latest"
            install_command: "dnf -y install curl bash"
          - distro: "alpine"
            image: "alpine:latest"
            install_command: "apk add --no-cache curl bash"
          - distro: "archlinux"
            image: "archlinux:latest"
            install_command: "pacman -Sy --noconfirm curl sudo wget bash"
    container:
      image: ${{ matrix.image }}
    steps:
      - run: ${{ matrix.install_command }}
      - run: curl -fsSL https://pkg.phase.dev/install.sh | bash
      - run: phase -h
      - run: phase -v

  # Test_MacOS_cli:
  #   name: Test - CLI installation - MacOS
  #   runs-on: macOS-latest
  #   steps:
  #     - name: Install Homebrew
  #       run: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

  #     - name: Install phase CLI via Homebrew
  #       run: brew install phasehq/cli/phase

  #     - name: Test phase CLI
  #       run: |
  #         phase -h
  #         phase -v

  # Test_Windows_cli:
  #   name: Test - CLI installation - Windows
  #   runs-on: windows-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Download phase CLI binary
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: Windows-binary
  #         path: ./phase-windows-executable

  #     - name: Test phase CLI
  #       run: |
  #         ./phase-windows-executable/phase-cli.exe -h
  #         ./phase-windows-executable/phase-cli.exe -v

  Build_and_push_docker:
    name: Build & Release - Docker
    needs: build_apk
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Download phase-alpine-build artifact
        uses: actions/download-artifact@v2
        with:
          name: phase-alpine-build
          path: dist

      - run: docker build -t phase-cli:latest .

      - name: Push to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
          docker tag phase-cli:latest phasehq/cli:latest
          docker push phasehq/cli:latest

      - run: docker save phase-cli:latest > phase-cli.tar

      - uses: actions/upload-artifact@v2
        with:
          name: phase-docker-image
          path: ./phase-cli.tar

  Pull_and_test_docker_image:
    name: Test - CLI - Docker
    needs: build_and_push_docker
    runs-on: ubuntu-latest
    steps:
      - run: docker run phasehq/cli:latest phase -h
      - run: docker run phasehq/cli:latest phase -v

  attach-assets:
    name: Attach assets to release
    runs-on: ubuntu-latest

    steps:
      # Download the artifacts from build jobs
      - name: Download DEB package
        uses: actions/download-artifact@v2
        with:
          name: phase-deb

      - name: Download RPM package
        uses: actions/download-artifact@v2
        with:
          name: phase-rpm

      - name: Download Linux binary
        uses: actions/download-artifact@v2
        with:
          name: ubuntu-latest-binary

      - name: Download Windows binary
        uses: actions/download-artifact@v2
        with:
          name: windows-latest-binary

      - name: Download MacOS binary
        uses: actions/download-artifact@v2
        with:
          name: macos-latest-binary

      - name: Download APK
        uses: actions/download-artifact@v2
        with:
          name: phase-apk

      - name: Download Alpine Linux standalone binary
        uses: actions/download-artifact@v2
        with:
          name: phase-alpine-build

      # Rename and checksum
      - name: Rename and calculate sha256
        run: |
          VERSION=${{ github.ref }}
          for f in *.deb; do mv "$f" "phase_cli_linux_amd64_$VERSION.deb"; done
          for f in *.rpm; do mv "$f" "phase_cli_linux_amd64_$VERSION.rpm"; done
          for f in phase; do mv "$f" "phase_cli_${f}_amd64_$VERSION"; done
          for f in phase.exe; do mv "$f" "phase_cli_windows_amd64_$VERSION.exe"; done
          for f in phase-alpine-build; do mv "$f" "phase_cli_alpine_linux_amd64_$VERSION"; done
          find . -type f \( -iname "*.deb" -o -iname "*.rpm" -o -iname "phase_cli_*" \) -exec sh -c 'sha256sum {} > {}.sha256' \;

      # Attach the artifacts to the release
      - name: Attach assets to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: |
            phase_cli_linux_amd64_${{ github.ref }}.deb
            phase_cli_linux_amd64_${{ github.ref }}.rpm
            phase_cli_linux_amd64_${{ github.ref }}
            phase_cli_linux_amd64_${{ github.ref }}.deb.sha256
            phase_cli_linux_amd64_${{ github.ref }}.rpm.sha256
            phase_cli_linux_amd64_${{ github.ref }}.sha256
            phase_cli_windows_amd64_${{ github.ref }}.exe
            phase_cli_windows_amd64_${{ github.ref }}.exe.sha256
            phase_cli_macos_amd64_${{ github.ref }}
            phase_cli_macos_amd64_${{ github.ref }}.sha256
            phase_cli_alpine_linux_amd64_${{ github.ref }}
            phase_cli_alpine_linux_amd64_${{ github.ref }}.sha256
          tag: ${{ github.ref }}
          overwrite: true
